// Generated by gencpp from file ros_its_msgs/CAM_simplified.msg
// DO NOT EDIT!


#ifndef ROS_ITS_MSGS_MESSAGE_CAM_SIMPLIFIED_H
#define ROS_ITS_MSGS_MESSAGE_CAM_SIMPLIFIED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_its_msgs
{
template <class ContainerAllocator>
struct CAM_simplified_
{
  typedef CAM_simplified_<ContainerAllocator> Type;

  CAM_simplified_()
    : car_name()
    , Station_ID()
    , latitude(0.0)
    , longitude(0.0)
    , altitude_altitudeValue(0.0)
    , heading_headingValue(0.0)
    , speed_speedValue(0.0)
    , driveDirection(0)
    , steeringWheelAngle_steeringWheelAngleValue(0.0)
    , gasPedalPercent_Value(0.0)
    , brakePedalPercent_Value(0.0)  {
    }
  CAM_simplified_(const ContainerAllocator& _alloc)
    : car_name(_alloc)
    , Station_ID(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude_altitudeValue(0.0)
    , heading_headingValue(0.0)
    , speed_speedValue(0.0)
    , driveDirection(0)
    , steeringWheelAngle_steeringWheelAngleValue(0.0)
    , gasPedalPercent_Value(0.0)
    , brakePedalPercent_Value(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _car_name_type;
  _car_name_type car_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Station_ID_type;
  _Station_ID_type Station_ID;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_altitudeValue_type;
  _altitude_altitudeValue_type altitude_altitudeValue;

   typedef float _heading_headingValue_type;
  _heading_headingValue_type heading_headingValue;

   typedef float _speed_speedValue_type;
  _speed_speedValue_type speed_speedValue;

   typedef int8_t _driveDirection_type;
  _driveDirection_type driveDirection;

   typedef float _steeringWheelAngle_steeringWheelAngleValue_type;
  _steeringWheelAngle_steeringWheelAngleValue_type steeringWheelAngle_steeringWheelAngleValue;

   typedef float _gasPedalPercent_Value_type;
  _gasPedalPercent_Value_type gasPedalPercent_Value;

   typedef float _brakePedalPercent_Value_type;
  _brakePedalPercent_Value_type brakePedalPercent_Value;





  typedef boost::shared_ptr< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> const> ConstPtr;

}; // struct CAM_simplified_

typedef ::ros_its_msgs::CAM_simplified_<std::allocator<void> > CAM_simplified;

typedef boost::shared_ptr< ::ros_its_msgs::CAM_simplified > CAM_simplifiedPtr;
typedef boost::shared_ptr< ::ros_its_msgs::CAM_simplified const> CAM_simplifiedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_its_msgs::CAM_simplified_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_its_msgs::CAM_simplified_<ContainerAllocator1> & lhs, const ::ros_its_msgs::CAM_simplified_<ContainerAllocator2> & rhs)
{
  return lhs.car_name == rhs.car_name &&
    lhs.Station_ID == rhs.Station_ID &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude_altitudeValue == rhs.altitude_altitudeValue &&
    lhs.heading_headingValue == rhs.heading_headingValue &&
    lhs.speed_speedValue == rhs.speed_speedValue &&
    lhs.driveDirection == rhs.driveDirection &&
    lhs.steeringWheelAngle_steeringWheelAngleValue == rhs.steeringWheelAngle_steeringWheelAngleValue &&
    lhs.gasPedalPercent_Value == rhs.gasPedalPercent_Value &&
    lhs.brakePedalPercent_Value == rhs.brakePedalPercent_Value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_its_msgs::CAM_simplified_<ContainerAllocator1> & lhs, const ::ros_its_msgs::CAM_simplified_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_its_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ad8a1ab31db5a9f774bad039fc1ce70";
  }

  static const char* value(const ::ros_its_msgs::CAM_simplified_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ad8a1ab31db5a9fULL;
  static const uint64_t static_value2 = 0x774bad039fc1ce70ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_its_msgs/CAM_simplified";
  }

  static const char* value(const ::ros_its_msgs::CAM_simplified_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IDs\n"
"\n"
"string car_name\n"
"string Station_ID\n"
"\n"
"# Reference Position\n"
"#int32 latitude\n"
"#int64 longitude\n"
"#int32 altitude_altitudeValue\n"
"\n"
"float32 latitude\n"
"float64 longitude\n"
"float32 altitude_altitudeValue\n"
"\n"
"# BasicVehicleContainerHighFrequency (Simplified)\n"
"\n"
"#uint16 heading_headingValue\n"
"#uint16 speed_speedValue\n"
"float32 heading_headingValue\n"
"float32 speed_speedValue\n"
"\n"
"int8 driveDirection\n"
"\n"
"#int16 steeringWheelAngle_steeringWheelAngleValue\n"
"float32 steeringWheelAngle_steeringWheelAngleValue\n"
"\n"
"float32 gasPedalPercent_Value\n"
"float32 brakePedalPercent_Value\n"
"\n"
"#float32 Ref_distance\n"
"#float32 leader_distance\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ros_its_msgs::CAM_simplified_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_name);
      stream.next(m.Station_ID);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude_altitudeValue);
      stream.next(m.heading_headingValue);
      stream.next(m.speed_speedValue);
      stream.next(m.driveDirection);
      stream.next(m.steeringWheelAngle_steeringWheelAngleValue);
      stream.next(m.gasPedalPercent_Value);
      stream.next(m.brakePedalPercent_Value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAM_simplified_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_its_msgs::CAM_simplified_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_its_msgs::CAM_simplified_<ContainerAllocator>& v)
  {
    s << indent << "car_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.car_name);
    s << indent << "Station_ID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Station_ID);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude_altitudeValue: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_altitudeValue);
    s << indent << "heading_headingValue: ";
    Printer<float>::stream(s, indent + "  ", v.heading_headingValue);
    s << indent << "speed_speedValue: ";
    Printer<float>::stream(s, indent + "  ", v.speed_speedValue);
    s << indent << "driveDirection: ";
    Printer<int8_t>::stream(s, indent + "  ", v.driveDirection);
    s << indent << "steeringWheelAngle_steeringWheelAngleValue: ";
    Printer<float>::stream(s, indent + "  ", v.steeringWheelAngle_steeringWheelAngleValue);
    s << indent << "gasPedalPercent_Value: ";
    Printer<float>::stream(s, indent + "  ", v.gasPedalPercent_Value);
    s << indent << "brakePedalPercent_Value: ";
    Printer<float>::stream(s, indent + "  ", v.brakePedalPercent_Value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ITS_MSGS_MESSAGE_CAM_SIMPLIFIED_H
