// Generated by gencpp from file image_processing/coords.msg
// DO NOT EDIT!


#ifndef IMAGE_PROCESSING_MESSAGE_COORDS_H
#define IMAGE_PROCESSING_MESSAGE_COORDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_processing
{
template <class ContainerAllocator>
struct coords_
{
  typedef coords_<ContainerAllocator> Type;

  coords_()
    : X2(0.0)
    , X1(0.0)
    , dif_X(0.0)
    , Y2(0.0)
    , Y1(0.0)
    , dif_Y(0.0)
    , slope(0.0)
    , length(0.0)
    , intercept(0.0)  {
    }
  coords_(const ContainerAllocator& _alloc)
    : X2(0.0)
    , X1(0.0)
    , dif_X(0.0)
    , Y2(0.0)
    , Y1(0.0)
    , dif_Y(0.0)
    , slope(0.0)
    , length(0.0)
    , intercept(0.0)  {
  (void)_alloc;
    }



   typedef float _X2_type;
  _X2_type X2;

   typedef float _X1_type;
  _X1_type X1;

   typedef float _dif_X_type;
  _dif_X_type dif_X;

   typedef float _Y2_type;
  _Y2_type Y2;

   typedef float _Y1_type;
  _Y1_type Y1;

   typedef float _dif_Y_type;
  _dif_Y_type dif_Y;

   typedef float _slope_type;
  _slope_type slope;

   typedef float _length_type;
  _length_type length;

   typedef float _intercept_type;
  _intercept_type intercept;





  typedef boost::shared_ptr< ::image_processing::coords_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_processing::coords_<ContainerAllocator> const> ConstPtr;

}; // struct coords_

typedef ::image_processing::coords_<std::allocator<void> > coords;

typedef boost::shared_ptr< ::image_processing::coords > coordsPtr;
typedef boost::shared_ptr< ::image_processing::coords const> coordsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_processing::coords_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_processing::coords_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::image_processing::coords_<ContainerAllocator1> & lhs, const ::image_processing::coords_<ContainerAllocator2> & rhs)
{
  return lhs.X2 == rhs.X2 &&
    lhs.X1 == rhs.X1 &&
    lhs.dif_X == rhs.dif_X &&
    lhs.Y2 == rhs.Y2 &&
    lhs.Y1 == rhs.Y1 &&
    lhs.dif_Y == rhs.dif_Y &&
    lhs.slope == rhs.slope &&
    lhs.length == rhs.length &&
    lhs.intercept == rhs.intercept;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::image_processing::coords_<ContainerAllocator1> & lhs, const ::image_processing::coords_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace image_processing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::image_processing::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_processing::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_processing::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_processing::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_processing::coords_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_processing::coords_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_processing::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07271e516a6d3af46ff39e3801eabeb2";
  }

  static const char* value(const ::image_processing::coords_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07271e516a6d3af4ULL;
  static const uint64_t static_value2 = 0x6ff39e3801eabeb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_processing::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_processing/coords";
  }

  static const char* value(const ::image_processing::coords_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_processing::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 X2\n"
"float32 X1\n"
"float32 dif_X\n"
"float32 Y2\n"
"float32 Y1\n"
"float32 dif_Y\n"
"float32 slope\n"
"float32 length\n"
"float32 intercept\n"
;
  }

  static const char* value(const ::image_processing::coords_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_processing::coords_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X2);
      stream.next(m.X1);
      stream.next(m.dif_X);
      stream.next(m.Y2);
      stream.next(m.Y1);
      stream.next(m.dif_Y);
      stream.next(m.slope);
      stream.next(m.length);
      stream.next(m.intercept);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coords_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_processing::coords_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_processing::coords_<ContainerAllocator>& v)
  {
    s << indent << "X2: ";
    Printer<float>::stream(s, indent + "  ", v.X2);
    s << indent << "X1: ";
    Printer<float>::stream(s, indent + "  ", v.X1);
    s << indent << "dif_X: ";
    Printer<float>::stream(s, indent + "  ", v.dif_X);
    s << indent << "Y2: ";
    Printer<float>::stream(s, indent + "  ", v.Y2);
    s << indent << "Y1: ";
    Printer<float>::stream(s, indent + "  ", v.Y1);
    s << indent << "dif_Y: ";
    Printer<float>::stream(s, indent + "  ", v.dif_Y);
    s << indent << "slope: ";
    Printer<float>::stream(s, indent + "  ", v.slope);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "intercept: ";
    Printer<float>::stream(s, indent + "  ", v.intercept);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_PROCESSING_MESSAGE_COORDS_H
