// Generated by gencpp from file ros_its_msgs/Sonar.msg
// DO NOT EDIT!


#ifndef ROS_ITS_MSGS_MESSAGE_SONAR_H
#define ROS_ITS_MSGS_MESSAGE_SONAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_its_msgs
{
template <class ContainerAllocator>
struct Sonar_
{
  typedef Sonar_<ContainerAllocator> Type;

  Sonar_()
    : header()
    , radiation_type(0)
    , field_of_view(0.0)
    , min_range(0.0)
    , max_range(0.0)
    , range(0.0)  {
    }
  Sonar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , radiation_type(0)
    , field_of_view(0.0)
    , min_range(0.0)
    , max_range(0.0)
    , range(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _radiation_type_type;
  _radiation_type_type radiation_type;

   typedef float _field_of_view_type;
  _field_of_view_type field_of_view;

   typedef float _min_range_type;
  _min_range_type min_range;

   typedef float _max_range_type;
  _max_range_type max_range;

   typedef float _range_type;
  _range_type range;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ULTRASOUND)
  #undef ULTRASOUND
#endif
#if defined(_WIN32) && defined(INFRARED)
  #undef INFRARED
#endif

  enum {
    ULTRASOUND = 0u,
    INFRARED = 1u,
  };


  typedef boost::shared_ptr< ::ros_its_msgs::Sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_its_msgs::Sonar_<ContainerAllocator> const> ConstPtr;

}; // struct Sonar_

typedef ::ros_its_msgs::Sonar_<std::allocator<void> > Sonar;

typedef boost::shared_ptr< ::ros_its_msgs::Sonar > SonarPtr;
typedef boost::shared_ptr< ::ros_its_msgs::Sonar const> SonarConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_its_msgs::Sonar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_its_msgs::Sonar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_its_msgs::Sonar_<ContainerAllocator1> & lhs, const ::ros_its_msgs::Sonar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.radiation_type == rhs.radiation_type &&
    lhs.field_of_view == rhs.field_of_view &&
    lhs.min_range == rhs.min_range &&
    lhs.max_range == rhs.max_range &&
    lhs.range == rhs.range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_its_msgs::Sonar_<ContainerAllocator1> & lhs, const ::ros_its_msgs::Sonar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_its_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::Sonar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::Sonar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::Sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::Sonar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_its_msgs::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c005c34273dc426c67a020a87bc24148";
  }

  static const char* value(const ::ros_its_msgs::Sonar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc005c34273dc426cULL;
  static const uint64_t static_value2 = 0x67a020a87bc24148ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_its_msgs::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_its_msgs/Sonar";
  }

  static const char* value(const ::ros_its_msgs::Sonar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_its_msgs::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ULTRASOUND=0\n"
"uint8 INFRARED=1\n"
"std_msgs/Header header\n"
"uint8 radiation_type\n"
"float32 field_of_view\n"
"float32 min_range\n"
"float32 max_range\n"
"float32 range\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_its_msgs::Sonar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_its_msgs::Sonar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.radiation_type);
      stream.next(m.field_of_view);
      stream.next(m.min_range);
      stream.next(m.max_range);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sonar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_its_msgs::Sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_its_msgs::Sonar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "radiation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radiation_type);
    s << indent << "field_of_view: ";
    Printer<float>::stream(s, indent + "  ", v.field_of_view);
    s << indent << "min_range: ";
    Printer<float>::stream(s, indent + "  ", v.min_range);
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ITS_MSGS_MESSAGE_SONAR_H
