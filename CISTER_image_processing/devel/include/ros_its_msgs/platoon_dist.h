// Generated by gencpp from file ros_its_msgs/platoon_dist.msg
// DO NOT EDIT!


#ifndef ROS_ITS_MSGS_MESSAGE_PLATOON_DIST_H
#define ROS_ITS_MSGS_MESSAGE_PLATOON_DIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_its_msgs
{
template <class ContainerAllocator>
struct platoon_dist_
{
  typedef platoon_dist_<ContainerAllocator> Type;

  platoon_dist_()
    : car_name()
    , Ref_distance(0.0)
    , leader_distance(0.0)  {
    }
  platoon_dist_(const ContainerAllocator& _alloc)
    : car_name(_alloc)
    , Ref_distance(0.0)
    , leader_distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _car_name_type;
  _car_name_type car_name;

   typedef float _Ref_distance_type;
  _Ref_distance_type Ref_distance;

   typedef float _leader_distance_type;
  _leader_distance_type leader_distance;





  typedef boost::shared_ptr< ::ros_its_msgs::platoon_dist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_its_msgs::platoon_dist_<ContainerAllocator> const> ConstPtr;

}; // struct platoon_dist_

typedef ::ros_its_msgs::platoon_dist_<std::allocator<void> > platoon_dist;

typedef boost::shared_ptr< ::ros_its_msgs::platoon_dist > platoon_distPtr;
typedef boost::shared_ptr< ::ros_its_msgs::platoon_dist const> platoon_distConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_its_msgs::platoon_dist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_its_msgs::platoon_dist_<ContainerAllocator1> & lhs, const ::ros_its_msgs::platoon_dist_<ContainerAllocator2> & rhs)
{
  return lhs.car_name == rhs.car_name &&
    lhs.Ref_distance == rhs.Ref_distance &&
    lhs.leader_distance == rhs.leader_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_its_msgs::platoon_dist_<ContainerAllocator1> & lhs, const ::ros_its_msgs::platoon_dist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_its_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::platoon_dist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::platoon_dist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::platoon_dist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "865334224e65761f8e48bcb6f774f442";
  }

  static const char* value(const ::ros_its_msgs::platoon_dist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x865334224e65761fULL;
  static const uint64_t static_value2 = 0x8e48bcb6f774f442ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_its_msgs/platoon_dist";
  }

  static const char* value(const ::ros_its_msgs::platoon_dist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string car_name\n"
"\n"
"float32 Ref_distance\n"
"float32 leader_distance\n"
"\n"
;
  }

  static const char* value(const ::ros_its_msgs::platoon_dist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_name);
      stream.next(m.Ref_distance);
      stream.next(m.leader_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct platoon_dist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_its_msgs::platoon_dist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_its_msgs::platoon_dist_<ContainerAllocator>& v)
  {
    s << indent << "car_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.car_name);
    s << indent << "Ref_distance: ";
    Printer<float>::stream(s, indent + "  ", v.Ref_distance);
    s << indent << "leader_distance: ";
    Printer<float>::stream(s, indent + "  ", v.leader_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ITS_MSGS_MESSAGE_PLATOON_DIST_H
