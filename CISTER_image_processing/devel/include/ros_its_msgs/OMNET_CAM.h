// Generated by gencpp from file ros_its_msgs/OMNET_CAM.msg
// DO NOT EDIT!


#ifndef ROS_ITS_MSGS_MESSAGE_OMNET_CAM_H
#define ROS_ITS_MSGS_MESSAGE_OMNET_CAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_its_msgs
{
template <class ContainerAllocator>
struct OMNET_CAM_
{
  typedef OMNET_CAM_<ContainerAllocator> Type;

  OMNET_CAM_()
    : car_name()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , speed(0.0)
    , acceleration(0.0)  {
    }
  OMNET_CAM_(const ContainerAllocator& _alloc)
    : car_name(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , speed(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _car_name_type;
  _car_name_type car_name;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> const> ConstPtr;

}; // struct OMNET_CAM_

typedef ::ros_its_msgs::OMNET_CAM_<std::allocator<void> > OMNET_CAM;

typedef boost::shared_ptr< ::ros_its_msgs::OMNET_CAM > OMNET_CAMPtr;
typedef boost::shared_ptr< ::ros_its_msgs::OMNET_CAM const> OMNET_CAMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator1> & lhs, const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator2> & rhs)
{
  return lhs.car_name == rhs.car_name &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.heading == rhs.heading &&
    lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator1> & lhs, const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_its_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8e185aa09a6a67e142adbb8f653456b";
  }

  static const char* value(const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8e185aa09a6a67eULL;
  static const uint64_t static_value2 = 0x142adbb8f653456bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_its_msgs/OMNET_CAM";
  }

  static const char* value(const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string car_name\n"
"\n"
"float32 latitude\n"
"float64 longitude\n"
"float32 altitude\n"
"\n"
"float32 heading\n"
"float32 speed\n"
"\n"
"float32 acceleration\n"
;
  }

  static const char* value(const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_name);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OMNET_CAM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_its_msgs::OMNET_CAM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_its_msgs::OMNET_CAM_<ContainerAllocator>& v)
  {
    s << indent << "car_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.car_name);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ITS_MSGS_MESSAGE_OMNET_CAM_H
