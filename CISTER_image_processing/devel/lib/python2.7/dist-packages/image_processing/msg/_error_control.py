# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from image_processing/error_control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class error_control(genpy.Message):
  _md5sum = "1d6a944f0c56f70ef6f19b82ff1f68dd"
  _type = "image_processing/error_control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 error_steer
float32 control_error_steer
float32 steer_integral
float32 steer_deriv
float32 pid_error_value
float32 theta_error_value
float32 dist_tv
int32 status
"""
  __slots__ = ['error_steer','control_error_steer','steer_integral','steer_deriv','pid_error_value','theta_error_value','dist_tv','status']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_steer,control_error_steer,steer_integral,steer_deriv,pid_error_value,theta_error_value,dist_tv,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(error_control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error_steer is None:
        self.error_steer = 0.
      if self.control_error_steer is None:
        self.control_error_steer = 0.
      if self.steer_integral is None:
        self.steer_integral = 0.
      if self.steer_deriv is None:
        self.steer_deriv = 0.
      if self.pid_error_value is None:
        self.pid_error_value = 0.
      if self.theta_error_value is None:
        self.theta_error_value = 0.
      if self.dist_tv is None:
        self.dist_tv = 0.
      if self.status is None:
        self.status = 0
    else:
      self.error_steer = 0.
      self.control_error_steer = 0.
      self.steer_integral = 0.
      self.steer_deriv = 0.
      self.pid_error_value = 0.
      self.theta_error_value = 0.
      self.dist_tv = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fi().pack(_x.error_steer, _x.control_error_steer, _x.steer_integral, _x.steer_deriv, _x.pid_error_value, _x.theta_error_value, _x.dist_tv, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.error_steer, _x.control_error_steer, _x.steer_integral, _x.steer_deriv, _x.pid_error_value, _x.theta_error_value, _x.dist_tv, _x.status,) = _get_struct_7fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fi().pack(_x.error_steer, _x.control_error_steer, _x.steer_integral, _x.steer_deriv, _x.pid_error_value, _x.theta_error_value, _x.dist_tv, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.error_steer, _x.control_error_steer, _x.steer_integral, _x.steer_deriv, _x.pid_error_value, _x.theta_error_value, _x.dist_tv, _x.status,) = _get_struct_7fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fi = None
def _get_struct_7fi():
    global _struct_7fi
    if _struct_7fi is None:
        _struct_7fi = struct.Struct("<7fi")
    return _struct_7fi
