# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from image_processing/coords.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class coords(genpy.Message):
  _md5sum = "07271e516a6d3af46ff39e3801eabeb2"
  _type = "image_processing/coords"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 X2
float32 X1
float32 dif_X
float32 Y2
float32 Y1
float32 dif_Y
float32 slope
float32 length
float32 intercept
"""
  __slots__ = ['X2','X1','dif_X','Y2','Y1','dif_Y','slope','length','intercept']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       X2,X1,dif_X,Y2,Y1,dif_Y,slope,length,intercept

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(coords, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.X2 is None:
        self.X2 = 0.
      if self.X1 is None:
        self.X1 = 0.
      if self.dif_X is None:
        self.dif_X = 0.
      if self.Y2 is None:
        self.Y2 = 0.
      if self.Y1 is None:
        self.Y1 = 0.
      if self.dif_Y is None:
        self.dif_Y = 0.
      if self.slope is None:
        self.slope = 0.
      if self.length is None:
        self.length = 0.
      if self.intercept is None:
        self.intercept = 0.
    else:
      self.X2 = 0.
      self.X1 = 0.
      self.dif_X = 0.
      self.Y2 = 0.
      self.Y1 = 0.
      self.dif_Y = 0.
      self.slope = 0.
      self.length = 0.
      self.intercept = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.X2, _x.X1, _x.dif_X, _x.Y2, _x.Y1, _x.dif_Y, _x.slope, _x.length, _x.intercept))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.X2, _x.X1, _x.dif_X, _x.Y2, _x.Y1, _x.dif_Y, _x.slope, _x.length, _x.intercept,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.X2, _x.X1, _x.dif_X, _x.Y2, _x.Y1, _x.dif_Y, _x.slope, _x.length, _x.intercept))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.X2, _x.X1, _x.dif_X, _x.Y2, _x.Y1, _x.dif_Y, _x.slope, _x.length, _x.intercept,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
