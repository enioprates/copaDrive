# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_its_msgs/CAM_simplified.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CAM_simplified(genpy.Message):
  _md5sum = "5ad8a1ab31db5a9f774bad039fc1ce70"
  _type = "ros_its_msgs/CAM_simplified"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# IDs

string car_name
string Station_ID

# Reference Position
#int32 latitude
#int64 longitude
#int32 altitude_altitudeValue

float32 latitude
float64 longitude
float32 altitude_altitudeValue

# BasicVehicleContainerHighFrequency (Simplified)

#uint16 heading_headingValue
#uint16 speed_speedValue
float32 heading_headingValue
float32 speed_speedValue

int8 driveDirection

#int16 steeringWheelAngle_steeringWheelAngleValue
float32 steeringWheelAngle_steeringWheelAngleValue

float32 gasPedalPercent_Value
float32 brakePedalPercent_Value

#float32 Ref_distance
#float32 leader_distance





"""
  __slots__ = ['car_name','Station_ID','latitude','longitude','altitude_altitudeValue','heading_headingValue','speed_speedValue','driveDirection','steeringWheelAngle_steeringWheelAngleValue','gasPedalPercent_Value','brakePedalPercent_Value']
  _slot_types = ['string','string','float32','float64','float32','float32','float32','int8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       car_name,Station_ID,latitude,longitude,altitude_altitudeValue,heading_headingValue,speed_speedValue,driveDirection,steeringWheelAngle_steeringWheelAngleValue,gasPedalPercent_Value,brakePedalPercent_Value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CAM_simplified, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.car_name is None:
        self.car_name = ''
      if self.Station_ID is None:
        self.Station_ID = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude_altitudeValue is None:
        self.altitude_altitudeValue = 0.
      if self.heading_headingValue is None:
        self.heading_headingValue = 0.
      if self.speed_speedValue is None:
        self.speed_speedValue = 0.
      if self.driveDirection is None:
        self.driveDirection = 0
      if self.steeringWheelAngle_steeringWheelAngleValue is None:
        self.steeringWheelAngle_steeringWheelAngleValue = 0.
      if self.gasPedalPercent_Value is None:
        self.gasPedalPercent_Value = 0.
      if self.brakePedalPercent_Value is None:
        self.brakePedalPercent_Value = 0.
    else:
      self.car_name = ''
      self.Station_ID = ''
      self.latitude = 0.
      self.longitude = 0.
      self.altitude_altitudeValue = 0.
      self.heading_headingValue = 0.
      self.speed_speedValue = 0.
      self.driveDirection = 0
      self.steeringWheelAngle_steeringWheelAngleValue = 0.
      self.gasPedalPercent_Value = 0.
      self.brakePedalPercent_Value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.car_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Station_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fd3fb3f().pack(_x.latitude, _x.longitude, _x.altitude_altitudeValue, _x.heading_headingValue, _x.speed_speedValue, _x.driveDirection, _x.steeringWheelAngle_steeringWheelAngleValue, _x.gasPedalPercent_Value, _x.brakePedalPercent_Value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.car_name = str[start:end].decode('utf-8')
      else:
        self.car_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Station_ID = str[start:end].decode('utf-8')
      else:
        self.Station_ID = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.latitude, _x.longitude, _x.altitude_altitudeValue, _x.heading_headingValue, _x.speed_speedValue, _x.driveDirection, _x.steeringWheelAngle_steeringWheelAngleValue, _x.gasPedalPercent_Value, _x.brakePedalPercent_Value,) = _get_struct_fd3fb3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.car_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Station_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fd3fb3f().pack(_x.latitude, _x.longitude, _x.altitude_altitudeValue, _x.heading_headingValue, _x.speed_speedValue, _x.driveDirection, _x.steeringWheelAngle_steeringWheelAngleValue, _x.gasPedalPercent_Value, _x.brakePedalPercent_Value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.car_name = str[start:end].decode('utf-8')
      else:
        self.car_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Station_ID = str[start:end].decode('utf-8')
      else:
        self.Station_ID = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.latitude, _x.longitude, _x.altitude_altitudeValue, _x.heading_headingValue, _x.speed_speedValue, _x.driveDirection, _x.steeringWheelAngle_steeringWheelAngleValue, _x.gasPedalPercent_Value, _x.brakePedalPercent_Value,) = _get_struct_fd3fb3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fd3fb3f = None
def _get_struct_fd3fb3f():
    global _struct_fd3fb3f
    if _struct_fd3fb3f is None:
        _struct_fd3fb3f = struct.Struct("<fd3fb3f")
    return _struct_fd3fb3f
